{"version":3,"sources":["components/Navbar/Navbar.js","components/Homepage/Homepage.js","components/Characters/Characters.js","components/Students/Students.js","components/Staff/Staff.js","components/House/House.js","App.js","serviceWorker.js","index.js"],"names":["arrayOfNavItems","Navbar","className","map","item","index","to","key","Homepage","Characters","URL","useState","data","setData","useEffect","fetch","then","response","json","character","wand","core","wood","patronus","length","alive","src","image","alt","name","species","house","dateOfBirth","ancestry","actor","Students","Staff","arrayOfHouses","House","targetFetching","setTargetFetching","visibility","setVisibility","id","onClick","CSSTransition","in","appear","timeout","classNames","unmountOnExit","App","path","exact","component","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd180563.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className='NavbarContainer'>\r\n            <nav className='Navbar'>\r\n                <div className='NavbarItemsContainer'>\r\n                    {arrayOfNavItems.map( (item, index) => {\r\n                        return (\r\n                                <Link  \r\n                                    to={`/${item}`}\r\n                                    key={index}\r\n                                    className='NavbarItem'\r\n                                >   \r\n                                    {item}\r\n                                </Link >\r\n                            )\r\n                    })}\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\nconst arrayOfNavItems = [\r\n    'characters',\r\n    'students',\r\n    'staff',\r\n    'house'\r\n];\r\nexport default Navbar\r\n","import React from 'react';\r\nimport './Homepage.css';\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div className='Homepage'>\r\n            <h1>Simple app with data about characters from Harry potter</h1>\r\n            <h2>Navigate to continue</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default Homepage\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Characters.css';\r\n\r\nconst Characters = ( {URL} ) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch(URL)\r\n            .then(response => response.json())\r\n            .then(data => setData(data))\r\n    }, [URL]); \r\n\r\n    return (\r\n        <div className='Characters-Container'>\r\n            <h1>All characters in Harry Potter:</h1>\r\n            <div className='Character-Cards-Container'>\r\n                {data.map( (character, index) => {\r\n                    if(character.wand.core === '') {\r\n                        character.wand.core = ('?');\r\n                    }\r\n                    if(character.wand.wood === '') {\r\n                        character.wand.wood = ('?');\r\n                    }\r\n                    if(character.patronus === '') {\r\n                        character.patronus = ('?');\r\n                    }\r\n                    if(character.wand.length === ''){\r\n                        character.wand.length = ('?');\r\n                    }\r\n                    // check is alive\r\n                    if(character.alive === false) {\r\n                        character.alive = 'Dead';\r\n                    }\r\n                    else if(character.alive === true) {\r\n                        character.alive = 'Alive';\r\n                    }\r\n                    return (\r\n                        <div key={index} className='Character-Card'>\r\n                            <img src={character.image} alt={character.image}/>\r\n                            <div className='Character-Data'>\r\n                                <div>\r\n                                    name: <b>{character.name}</b>\r\n                                </div>\r\n                                <div>\r\n                                    species: <b>{character.species}</b>\r\n                                </div>\r\n                                <div>\r\n                                    house: <b>{character.house}</b>\r\n                                </div>\r\n                            </div>\r\n                            <div className='Character-Data-Back-Container'>\r\n                                <div className='Character-Data-Back'>\r\n                                    <div>\r\n                                        date of birth: <b>{character.dateOfBirth}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        ancestry: <b>{character.ancestry} ({character.species}) </b>\r\n                                    </div>\r\n                                    <div>\r\n                                        wand <br/>\r\n                                        wood:  <b>{character.wand.wood}</b> <br/>\r\n                                        core: <b>{character.wand.core} </b> <br/>\r\n                                        length: <b>{character.wand.length} cm</b>\r\n                                        \r\n                                    </div>\r\n                                    <div>\r\n                                        patronus: <b>{character.patronus}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        played by: <b>{character.actor}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        <b>{character.alive}</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Characters","import React, { useEffect, useState } from 'react';\r\nimport './Students.css';\r\n\r\nconst Students = ( {URL} ) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch(URL + `/students`)\r\n            .then(response => response.json())\r\n            .then(data => setData(data))\r\n    }, [URL]); \r\n\r\n    return (\r\n        <div className='Students-Container'>\r\n            <h1>Students in Harry Potter</h1>\r\n            <div className='Students-Cards-Container'>\r\n                {data.map( (character, index) => {\r\n                    if(character.wand.core === '') {\r\n                        character.wand.core = ('?');\r\n                    }\r\n                    if(character.wand.wood === '') {\r\n                        character.wand.wood = ('?');\r\n                    }\r\n                    if(character.patronus === '') {\r\n                        character.patronus = ('?');\r\n                    }\r\n                    if(character.wand.length === ''){\r\n                        character.wand.length = ('?');\r\n                    }\r\n                    // check is alive\r\n                    if(character.alive === false) {\r\n                        character.alive = 'Dead';\r\n                    }\r\n                    else if(character.alive === true) {\r\n                        character.alive = 'Alive';\r\n                    }\r\n                    return (\r\n                        <div key={index} className='Students-Card'>\r\n                            <img src={character.image} alt={character.image}/>\r\n                            <div className='Students-Data'>\r\n                                <div>\r\n                                    name: <b>{character.name}</b>\r\n                                </div>\r\n                                <div>\r\n                                    species: <b>{character.species}</b>\r\n                                </div>\r\n                                <div>\r\n                                    house: <b>{character.house}</b>\r\n                                </div>\r\n                            </div>\r\n                            <div className='Students-Data-Back-Container'>\r\n                                <div className='Students-Data-Back'>\r\n                                    <div>\r\n                                        date of birth: <b>{character.dateOfBirth}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        ancestry: <b>{character.ancestry} ({character.species}) </b>\r\n                                    </div>\r\n                                    <div>\r\n                                        wand <br/>\r\n                                        wood:  <b>{character.wand.wood}</b> <br/>\r\n                                        core: <b>{character.wand.core} </b> <br/>\r\n                                        length: <b>{character.wand.length} cm</b>\r\n                                        \r\n                                    </div>\r\n                                    <div>\r\n                                        patronus: <b>{character.patronus}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        played by: <b>{character.actor}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        <b>{character.alive}</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Students","import React, { useEffect, useState } from 'react';\r\nimport './Staff.css';\r\n\r\nconst Staff = ( {URL} ) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch(URL + `/staff`)\r\n            .then(response => response.json())\r\n            .then(data => setData(data))\r\n    }, [URL]); \r\n\r\n    return (\r\n        <div className='Staff-Container'>\r\n            <h1>Staff in Harry Potter</h1>\r\n            <div className='Staff-Cards-Container'>\r\n                {data.map( (character, index) => {\r\n                    if(character.wand.core === '') {\r\n                        character.wand.core = ('?');\r\n                    }\r\n                    if(character.wand.wood === '') {\r\n                        character.wand.wood = ('?');\r\n                    }\r\n                    if(character.patronus === '') {\r\n                        character.patronus = ('?');\r\n                    }\r\n                    if(character.wand.length === ''){\r\n                        character.wand.length = ('?');\r\n                    }\r\n                    // check is alive\r\n                    if(character.alive === false) {\r\n                        character.alive = 'Dead';\r\n                    }\r\n                    else if(character.alive === true) {\r\n                        character.alive = 'Alive';\r\n                    }\r\n                    return (\r\n                        <div key={index} className='Staff-Card'>\r\n                            <img src={character.image} alt={character.image}/>\r\n                            <div className='Staff-Data'>\r\n                                <div>\r\n                                    name: <b>{character.name}</b>\r\n                                </div>\r\n                                <div>\r\n                                    species: <b>{character.species}</b>\r\n                                </div>\r\n                                <div>\r\n                                    house: <b>{character.house}</b>\r\n                                </div>\r\n                            </div>\r\n                            <div className='Staff-Data-Back-Container'>\r\n                                <div className='Staff-Data-Back'>\r\n                                    <div>\r\n                                        date of birth: <b>{character.dateOfBirth}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        ancestry: <b>{character.ancestry} ({character.species}) </b>\r\n                                    </div>\r\n                                    <div>\r\n                                        wand <br/>\r\n                                        wood:  <b>{character.wand.wood}</b> <br/>\r\n                                        core: <b>{character.wand.core} </b> <br/>\r\n                                        length: <b>{character.wand.length} cm</b>\r\n                                        \r\n                                    </div>\r\n                                    <div>\r\n                                        patronus: <b>{character.patronus}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        played by: <b>{character.actor}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        <b>{character.alive}</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Staff","import React, { useEffect, useState } from 'react';\r\nimport './House.css';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nconst arrayOfHouses = [\r\n    'Gryffindor',\r\n    'Hufflepuff',\r\n    'Ravenclaw',\r\n    'Slytherin',\r\n]\r\n\r\nconst House = ( {URL} ) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [targetFetching, setTargetFetching] = useState('gryffindor');\r\n    const [visibility, setVisibility] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch(URL + `/house/${targetFetching}` ) // + somethin who defineuser\r\n            .then(response => response.json())\r\n            .then(data => setData(data))\r\n    }, [URL,targetFetching]); \r\n\r\n    const switchMenu = () => {\r\n        setVisibility(!visibility)\r\n    }\r\n\r\n    return (\r\n        <div className='House-Container'>\r\n            <h1>\r\n                characters from \r\n                <p id='characters-from'>{targetFetching}</p>\r\n            </h1>\r\n            <div className='Menu-Container'>\r\n                <button \r\n                    className='Menu-Button'\r\n                    onClick={switchMenu}\r\n                >\r\n                    Show houses\r\n                </button>\r\n                <CSSTransition\r\n                    in = { visibility }\r\n                    appear = {visibility}\r\n                    timeout = {300}\r\n                    classNames = 'list'\r\n                    unmountOnExit\r\n                >\r\n                    <div className='Menu-List'>\r\n                        {arrayOfHouses.map( (house, index) => {\r\n                            return (\r\n                                <li \r\n                                    key={index}\r\n                                    className='Menu-Item'\r\n                                    onClick= { () => setTargetFetching(house)}\r\n                                > \r\n                                    {house} \r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='House-Cards-Container'>\r\n                {data.map( (character, index) => {\r\n                    if(character.wand.core === '') {\r\n                        character.wand.core = ('?');\r\n                    }\r\n                    if(character.wand.wood === '') {\r\n                        character.wand.wood = ('?');\r\n                    }\r\n                    if(character.patronus === '') {\r\n                        character.patronus = ('?');\r\n                    }\r\n                    if(character.wand.length === ''){\r\n                        character.wand.length = ('?');\r\n                    }\r\n                    // check is alive\r\n                    if(character.alive === false) {\r\n                        character.alive = 'Dead';\r\n                    }\r\n                    else if(character.alive === true) {\r\n                        character.alive = 'Alive';\r\n                    }\r\n                    return (\r\n                        <div key={index} className='House-Card'>\r\n                            <img src={character.image} alt={character.image}/>\r\n                            <div className='House-Data'>\r\n                                <div>\r\n                                    name: <b>{character.name}</b>\r\n                                </div>\r\n                                <div>\r\n                                    species: <b>{character.species}</b>\r\n                                </div>\r\n                                <div>\r\n                                    house: <b>{character.house}</b>\r\n                                </div>\r\n                            </div>\r\n                            <div className='House-Data-Back-Container'>\r\n                                <div className='House-Data-Back'>\r\n                                    <div>\r\n                                        date of birth: <b>{character.dateOfBirth}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        ancestry: <b>{character.ancestry} ({character.species}) </b>\r\n                                    </div>\r\n                                    <div>\r\n                                        wand <br/>\r\n                                        wood:  <b>{character.wand.wood}</b> <br/>\r\n                                        core: <b>{character.wand.core} </b> <br/>\r\n                                        length: <b>{character.wand.length} cm</b>\r\n                                        \r\n                                    </div>\r\n                                    <div>\r\n                                        patronus: <b>{character.patronus}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        played by: <b>{character.actor}</b>\r\n                                    </div>\r\n                                    <div>\r\n                                        <b>{character.alive}</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default House","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport Homepage from './components/Homepage/Homepage'\r\nimport Characters from './components/Characters/Characters'\r\nimport Students from './components/Students/Students'\r\nimport Staff from './components/Staff/Staff'\r\nimport House from './components/House/House'\r\n\r\n\r\nimport {\r\n  BrowserRouter as Router ,\r\n  Switch, \r\n  Route\r\n} from 'react-router-dom';\r\n\r\n\r\nconst App = () => {\r\n  // URL for all charactes\r\n  const URL = `http://hp-api.herokuapp.com/api/characters`;\r\n\r\n  return (\r\n    <Router>\r\n        <div className='App'>\r\n            <Navbar />\r\n            <Switch>\r\n                <Route path='/' exact component={Homepage}/>\r\n                <Route \r\n                  path='/characters' \r\n                  render={(props) => <Characters {...props} URL={URL} />}\r\n                />\r\n                <Route \r\n                  path='/students' \r\n                  render={(props) => <Students {...props} URL={URL} />}\r\n                />\r\n                <Route \r\n                  path='/staff' \r\n                  render={(props) => <Staff {...props} URL={URL} />}\r\n                />\r\n                <Route \r\n                  path='/house' \r\n                  render={(props) => <House {...props} URL={URL} />}\r\n                />\r\n            </Switch>\r\n        </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}